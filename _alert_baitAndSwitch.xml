<analytic>
	<analytic>.alert.baitAndSwitch</analytic>
	<code_text>{[args]

	//keep inputs for debugging
	/.debug.baitAndSwitch:`time`args!(.z.p;args);

	.log.out[.z.h;".alert.baitAndSwitch";"instance = ",string[args[`threshold]`instance]];
  
	//read from threshold table	  
	cfg:args`threshold;
	entityLevel:.surv.getEntityLevel[cfg`entityLevel];
  
  	//AR1
  	//determine if triggerOnTrades or triggerOnCancelledOrders
  	triggerCases:(`triggerOnTradesTF`triggerOnCancelledOrdersTF)!(
  		(0=cfg`thresholdCancelOrderQtyPercentage) and 0=cfg`thresholdCancelOrderCountPercentage;
		(0&lt;cfg`thresholdCancelOrderQtyPercentage) or 0&lt;cfg`thresholdCancelOrderCountPercentage
	);
  	/&gt;
  	addToLookBackResults:.alert.baitAndSwitchAddToLookBack[args];

  	if[not count addToLookBackResults;
  		 .log.out[.z.h;"No `new trades or `cancelled orders - exiting analytic";()];
  		:()
  	]; 

  	currentItems:addToLookBackResults[0];
  	allCancelledOrderItems:addToLookBackResults[1];
  	allTradeItems:addToLookBackResults[2];
  	entityLevelOrdersInOB:addToLookBackResults[3];
  	
  	LBOBArgs:(`cfg`entityLevel`currentItems`entityLevelOrdersInOB)!(cfg;entityLevel;currentItems;entityLevelOrdersInOB);
  	
  	lookBackOnOrderBookResults:.alert.baitAndSwitchLookBackOnOrderBook[LBOBArgs];
  	
  	currentItems:lookBackOnOrderBookResults[0];
  	entityLevelOrdersInOB:lookBackOnOrderBookResults[1];
  	
    if[not count currentItems;
  		 .log.out[.z.h;"No layering on any side detected - exiting analytic";()];
  		:()
  	]; 
	
	//triggerOnTrades case has windows starting at LayeringMinStartTime
	//triggerOnCancelled orders has windows starting at LayeringMaxStartTime
	$[triggerCases`triggerOnTradesTF;
		[
			currentItems:update transactID:tradeID,buySideLayeringStartTime:buySideLayeringMinStartTime,sellSideLayeringStartTime:sellSideLayeringMinStartTime from currentItems;
			//join on OBfunction side outputs by keying entityValue+buy/sellSideLayeredTime
			currentItems:`transactTime xasc (
				((select from currentItems where side=`B) lj (`entityValue`sellSideLayeringStartTime xkey select sellSideLayeringStartTime:sellSideLayeredTime,entityValue,numBuyOrders,numBuyPriceSteps,totalBuyOrderQty,numSellOrders,numSellPriceSteps,totalSellOrderQty from entityLevelOrdersInOB))
				,
				(select from currentItems where side=`S) lj (`entityValue`buySideLayeringStartTime xkey select buySideLayeringStartTime:buySideLayeredTime,entityValue,numBuyOrders,numBuyPriceSteps,totalBuyOrderQty,numSellOrders,numSellPriceSteps,totalSellOrderQty from entityLevelOrdersInOB)
			); 
		];
		currentItems:update transactID:orderID,buySideLayeringStartTime:buySideLayeringMaxStartTime,sellSideLayeringStartTime:sellSideLayeringMaxStartTime from currentItems
	];	


	//AR3
	/SCBV-5799
	allTradeItems:$[count allTradeItems;allTradeItems;update tradeID:` from 0#allCancelledOrderItems];
			
	allItems:$[triggerCases`triggerOnTradesTF;
		allTradeItems;
		allCancelledOrderItems
	];


	//Rewrite the above to use less local variables
	buySideLayeredTWArgs:(`windowEndTimes`leftInclusive`timeInterval`windowStartTimesOverride`sourceTable`lookupTable`timeColumn`entityValueMatchColumn`windowEndsAtSeqNumberTF`matchSeqNumExactlyTF)!(currentItems[`transactTime];0;0;1+currentItems[`buySideLayeringStartTime];currentItems;allItems;`transactTime;`entityValue;0b;0b);
	sellSideLayeredTWArgs:(`windowEndTimes`leftInclusive`timeInterval`windowStartTimesOverride`sourceTable`lookupTable`timeColumn`entityValueMatchColumn`windowEndsAtSeqNumberTF`matchSeqNumExactlyTF)!(currentItems[`transactTime];0;0;1+currentItems[`sellSideLayeringStartTime];currentItems;allItems;`transactTime;`entityValue;0b;0b);
	
	thisSideLayeredRowsMatchingEntityInWindow:(`buy`sell)!(.surv.getEntityRowsInTimeWindow[buySideLayeredTWArgs];.surv.getEntityRowsInTimeWindow[sellSideLayeredTWArgs]);
	currentItems:update rowNumberBeforeTradeLogicChecked:i from currentItems;
	
	allOrders:select from entityLevelOrdersInOB where entityValue in distinct currentItems[`entityValue],orderStatus in `new`replaced;
	buySideLayeredOrderTWArgs:(`windowEndTimes`leftInclusive`timeInterval`windowStartTimesOverride`sourceTable`lookupTable`timeColumn`entityValueMatchColumn`windowEndsAtSeqNumberTF`matchSeqNumExactlyTF)!(currentItems[`transactTime];0;0;1+currentItems[`buySideLayeringStartTime];currentItems;allOrders;`transactTime;`entityValue;0b;0b);	
	sellSideLayeredOrderTWArgs:(`windowEndTimes`leftInclusive`timeInterval`windowStartTimesOverride`sourceTable`lookupTable`timeColumn`entityValueMatchColumn`windowEndsAtSeqNumberTF`matchSeqNumExactlyTF)!(currentItems[`transactTime];0;0;1+currentItems[`sellSideLayeringStartTime];currentItems;allOrders;`transactTime;`entityValue;0b;0b);
	
	thisSideLayeredOrderRowsMatchingEntityInWindow:(`buy`sell)!(.surv.getEntityRowsInTimeWindow[buySideLayeredOrderTWArgs];.surv.getEntityRowsInTimeWindow[sellSideLayeredOrderTWArgs]);	
	
	argsForEitherCase:(`triggerCases`cfg`entityLevel`currentItems`allItems`buySideLayeredRowsMatchingEntityInWindow`sellSideLayeredRowsMatchingEntityInWindow`allOrders`buySideLayeredOrderRowsMatchingEntityInWindow`sellSideLayeredOrderRowsMatchingEntityInWindow)!(triggerCases;cfg;entityLevel;currentItems;allItems;thisSideLayeredRowsMatchingEntityInWindow[`buy];thisSideLayeredRowsMatchingEntityInWindow[`sell];allOrders;thisSideLayeredOrderRowsMatchingEntityInWindow[`buy];thisSideLayeredOrderRowsMatchingEntityInWindow[`sell]);
	
	CCGAargs:(`argsForEitherCase`triggerCases`allTradeItems`allOrders`args`cfg`entityLevel)!(argsForEitherCase;triggerCases;allTradeItems;allOrders;args;cfg;entityLevel);	
	.alert.baitAndSwitchCheckCasesAndGenerateAlert[CCGAargs];

}</code_text>
	<description></description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>args</parameter>
		<default>
			<dictkey>
				<name>Key</name>
				<datatype>Symbol</datatype>
				<default></default>
				<isrequired>true</isrequired>
				<description></description>
			</dictkey>
		</default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Dict</datatype>
	</param>
	<analyticgroup>SurveillanceAlert</analyticgroup>
</analytic>
